name: Comprehensive Testing Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  frontend-tests:
    name: Frontend Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: tauri-gui-app/package-lock.json

    - name: Install dependencies
      working-directory: tauri-gui-app
      run: npm ci

    - name: Run unit tests
      working-directory: tauri-gui-app
      run: npm run test:run

    - name: Run component tests with coverage
      working-directory: tauri-gui-app
      run: npm run test:run -- --coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: tauri-gui-app/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Run performance tests
      working-directory: tauri-gui-app
      run: npm run test:run -- --testNamePattern="Performance Tests"

    - name: Run accessibility tests
      working-directory: tauri-gui-app
      run: npm run test:run -- --testNamePattern="Accessibility"

  backend-tests:
    name: Backend Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          tauri-gui-app/src-tauri/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run Rust tests
      working-directory: tauri-gui-app/src-tauri
      run: cargo test --verbose

    - name: Run integration tests
      working-directory: tauri-gui-app/src-tauri
      run: cargo test --test comprehensive_integration_tests --verbose

    - name: Run Rust linting
      working-directory: tauri-gui-app/src-tauri
      run: cargo clippy -- -D warnings

    - name: Check Rust formatting
      working-directory: tauri-gui-app/src-tauri
      run: cargo fmt --check

  e2e-tests:
    name: End-to-End Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest] # Windows E2E can be flaky

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        cache-dependency-path: tauri-gui-app/package-lock.json

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libwebkit2gtk-4.0-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

    - name: Install dependencies
      working-directory: tauri-gui-app
      run: npm ci

    - name: Build application
      working-directory: tauri-gui-app
      run: npm run tauri build

    - name: Run E2E tests
      working-directory: tauri-gui-app
      run: npm run test:run -- --testNamePattern="End-to-End Tests"

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        cache-dependency-path: tauri-gui-app/package-lock.json

    - name: Install dependencies
      working-directory: tauri-gui-app
      run: npm ci

    - name: Run security audit
      working-directory: tauri-gui-app
      run: npm audit --audit-level moderate

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run Rust security audit
      working-directory: tauri-gui-app/src-tauri
      run: cargo audit

  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        cache-dependency-path: tauri-gui-app/package-lock.json

    - name: Install dependencies
      working-directory: tauri-gui-app
      run: npm ci

    - name: Run performance benchmarks
      working-directory: tauri-gui-app
      run: npm run test:run -- --testNamePattern="Performance Tests|Stress Tests"

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Run Rust benchmarks
      working-directory: tauri-gui-app/src-tauri
      run: cargo test --release --test performance_tests

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        cache-dependency-path: tauri-gui-app/package-lock.json

    - name: Install dependencies
      working-directory: tauri-gui-app
      run: npm ci

    - name: Run ESLint
      working-directory: tauri-gui-app
      run: npx eslint src --ext .ts,.tsx --max-warnings 0

    - name: Run Prettier check
      working-directory: tauri-gui-app
      run: npx prettier --check "src/**/*.{ts,tsx,css,md}"

    - name: Run TypeScript check
      working-directory: tauri-gui-app
      run: npx tsc --noEmit

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Run Clippy
      working-directory: tauri-gui-app/src-tauri
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check Rust formatting
      working-directory: tauri-gui-app/src-tauri
      run: cargo fmt --check

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, e2e-tests, security-tests, performance-benchmarks, code-quality]
    if: always()

    steps:
    - name: Check test results
      run: |
        echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
        echo "Backend Tests: ${{ needs.backend-tests.result }}"
        echo "E2E Tests: ${{ needs.e2e-tests.result }}"
        echo "Security Tests: ${{ needs.security-tests.result }}"
        echo "Performance Tests: ${{ needs.performance-benchmarks.result }}"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        
        if [[ "${{ needs.frontend-tests.result }}" != "success" || 
              "${{ needs.backend-tests.result }}" != "success" || 
              "${{ needs.e2e-tests.result }}" != "success" || 
              "${{ needs.security-tests.result }}" != "success" || 
              "${{ needs.performance-benchmarks.result }}" != "success" || 
              "${{ needs.code-quality.result }}" != "success" ]]; then
          echo "Some tests failed!"
          exit 1
        else
          echo "All tests passed!"
        fi